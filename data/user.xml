<templateSet group="user">
  <template name="setup_platform" value="def setup_platform(hass, config, add_devices, discovery_info=None):&#10;    add_devices([$device$(config['$parm_name$'])])" description="" toReformat="true" toShortenFQNames="true">
    <variable name="device" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="parm_name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="twlog" value="import logging&#10;_LOGGER = logging.getLogger(__name__)&#10;handler = logging.StreamHandler(sys.stdout)&#10;handler.setFormatter(logging.Formatter(&#10;    '%(asctime)-15s %(levelname)s %(name)s %(funcName)s:%(lineno)d %(message)s',&#10;    datefmt='%Y-%m-%d %H:%M:%S'))&#10;_LOGGER.addHandler(handler)&#10;_LOGGER.setLevel(logging.DEBUG)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="dbg" value="import ipdb; ipdb.set_trace()  # NOQA XXX BREAKPOINT" description="tw dbg" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="decorator" value="def decorator(func):&#10;    @functools.wraps(func)&#10;    def wrapper(*args, **kwargs):&#10;        # Do something before&#10;        value = func(*args, **kwargs)&#10;        # Do something after&#10;        return value&#10;&#10;    return wrapper" description="tw decorator" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="import" value="import sys, os&#10;sys.path.insert(0, os.path.expandvars(os.path.expanduser('$path$'))" description="" toReformat="true" toShortenFQNames="true">
    <variable name="path" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="twclass" value="class $MyClass$(object):&#10;   &quot;&quot;&quot;Docstring for $MyClass$. &quot;&quot;&quot;&#10;&#10;   @classmethod  # classmethod always gets class as parameter&#10;   def get_clsname(cls):&#10;      return cls.__name__&#10;&#10;   def __init__(self):&#10;      super().__init__()&#10;&#10;   def __str__(self):&#10;       return &quot;{}/{}&quot;.format(&#10;           &quot;/&quot;.join(base.__name__ for base in self.__class__.__bases__),&#10;           self.__class__.__name__,&#10;       )&#10;       &#10;    def save(self, filename: Union[str, PathLike], prop: str = None):&#10;        with open(filename, 'wb') as f:&#10;            if prop is None:&#10;                _log.info(f&quot;Saving {self.__class__.__name__} to {f}.&quot;)&#10;                pickle.dump(self, f)&#10;                return&#10;            if prop in self.__dict__.keys():&#10;                _log.info(f&quot;Saving {prop}.&quot;)&#10;                data = getattr(self, prop)&#10;                pickle.dump(data, f)&#10;            else:&#10;                _log.warning(f&quot;{prop} does not exist on {self.__class__.__name__}.&quot;)&#10;&#10;    @staticmethod&#10;    def load(filename: PathLike) -&gt; 'Config':&#10;        _log.info(f'Loading instance: {filename}')&#10;        with open(filename, 'rb') as f:&#10;            return pickle.load(f)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="MyClass" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="print_center" value="print('-' * 80)&#10;        print('{:^80}'.format(&quot;$title$&quot;))&#10;        print('-' * 80)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="twlogbasic" value="import logging&#10;_LOGGER = logging.getLogger(__name__)&#10;log_fmt = r'%(asctime)-15s %(levelname)s %(name)s %(funcName)s:%(lineno)d %(message)s'&#10;logging.basicConfig(format=log_fmt, level=logging.DEBUG)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="twtest" value="&quot;&quot;&quot;&#10;python -m unittest tests.test_schedule&#10;python -m unittest tests.test_schedule.TestSchedule.test__check_periodicity -v&#10;&quot;&quot;&quot;&#10;from datetime import datetime&#10;from unittest import TestCase&#10;&#10;from helper import Schedule&#10;&#10;&#10;class $TestSchedule$(TestCase):&#10;    def setUp(self):&#10;        self.schedule = []&#10;&#10;    def test_get_value(self):&#10;        s = Schedule(self.schedule)&#10;        v = s.get_value(datetime.strptime('23:59', '%H:%M').time())&#10;        self.assertEqual(v, 24)&#10;&#10;    def test__check_periodicity(self):  # nothing is ever raised&#10;        schedule = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]&#10;        with self.assertRaises(AssertionError):&#10;            s = Schedule(schedule)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="TestSchedule" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="ldbg" value="_LOGGER.debug(f'{dbg()}:$msg$')" description="debug logger" toReformat="true" toShortenFQNames="true">
    <variable name="msg" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="evt_state_changed_handler" value="def evt_state_changed_energy_asset(self, e):&#10;        entity_id = e.data.get('entity_id')&#10;        domain, name = split_entity_id(entity_id)&#10;        old_state = new_state = old_attr = new_attr = None&#10;&#10;        if domain == ENERGY_ASSET_DOMAIN:&#10;            LOGGER.debug(f'{dbg()}: {e}')&#10;            # state creation&#10;            if e.data['old_state'] is None and e.data['new_state'] is not None:&#10;                new_state = e.data['new_state'].state&#10;                new_attr = e.data['new_state'].attributes&#10;&#10;            # state change&#10;            elif e.data['old_state'] is not None and e.data['new_state'] is not None:&#10;                old_state = e.data['old_state'].state&#10;                old_attr = e.data['old_state'].attributes&#10;                new_state = e.data['new_state'].state&#10;                new_attr = e.data['new_state'].attributes&#10;&#10;            # state removal&#10;            elif e.data['old_state'] is not None and e.data['new_state'] is None:&#10;                old_state = e.data['old_state'].state&#10;                old_attr = e.data['old_state'].attributes&#10;&#10;            else:&#10;                _LOGGER.exception(&quot;Invalid state change&quot;, exc_info=True)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="twprint" value="print(f&quot;\n{'xxxxx':*^80}&quot;)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="dbg()" value="def dbg():&#10;    '''returns function name of current function'''&#10;    # return inspect.getouterframes(inspect.currentframe())[1].function&#10;    # return inspect.currentframe().f_code.co_name&#10;    cf = inspect.currentframe()&#10;    return &quot;{}:{}&quot;.format(cf.f_back.f_code.co_name, cf.f_back.f_lineno)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="vagent" value="import logging&#10;&#10;from volttron.platform.vip.agent import Agent, Core, PubSub, RPC&#10;from volttron.platform.agent import utils&#10;&#10;utils.setup_logging()&#10;_log = logging.getLogger(__name__)&#10;&#10;&#10;class MyAgent(Agent):&#10;    def __init__(self, config_path, **kwargs):&#10;        self.config = utils.load_config(config_path)&#10;&#10;    @Core.receiver('onsetup')&#10;    def onsetup(self, sender, **kwargs):&#10;        pass&#10;&#10;    @Core.receiver('onstart')&#10;    def onstart(self, sender, **kwargs):&#10;        self.vip.heartbeat.start()&#10;&#10;    @Core.receiver('onstop')&#10;    def onstop(self, sender, **kwargs):&#10;        pass&#10;&#10;    @Core.receiver('onfinish')&#10;    def onfinish(self, sender, **kwargs):&#10;        pass&#10;&#10;    @PubSub.subscribe('pubsub', 'some/topic')&#10;    def on_match(self, peer, sender, bus,  topic, headers, message):&#10;        pass&#10;&#10;    @RPC.export&#10;    def my_method(self):&#10;        pass&#10;&#10;def main():&#10;    utils.vip_main(MyAgent)&#10;&#10;if __name__ == '__main__':&#10;    try:&#10;        main()&#10;    except KeyboardInterrupt:&#10;        pass" description="volttron agent skeleton" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="case" value="case &quot;$1&quot; in&#10;    $actuator$)&#10;        ActuatorAgent&#10;        ;;&#10;    $debugger$)&#10;        Debugger&#10;        ;;&#10;    *)&#10;        echo &quot;Usage: {$actuator$|$debugger$}&quot;&#10;        exit 1&#10;esac" description="" toReformat="true" toShortenFQNames="true">
    <variable name="actuator" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="debugger" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="true" />
      <option name="SHELL_SCRIPT" value="true" />
    </context>
  </template>
  <template name="getopts" value="function usage () {&#10;    echo &quot;Usage : $0  [options] [--]&#10;••••&#10;    Options:&#10;    -h:             Display this message&#10;    -v:             Display script version&#10;    -f filename:    Specifiy filename&#10;    -r:             Run&#10;    -s:             Stop&quot;&#10;}&#10;&#10;rlfag=false&#10;sflag=fals&#10;&#10;while getopts &quot;:hvf:&quot; opt&#10;do&#10;    case $opt in&#10;        h) usage; exit 0;;&#10;        v) echo &quot; -- Version $__ScriptVersion&quot;; exit 0   ;;&#10;        f) file=$OPTARG;;&#10;        r) rflag=true; echo &quot;Starting Home-Assistant&quot;; run_docker;;&#10;        s) sflag=true; echo &quot;Stopping Home-Assistant&quot;; stop_docker;;&#10;        *) echo -e &quot;\n  Option does not exist : $OPTARG\n&quot;&#10;            usage; exit 1;;&#10;    esac&#10;done&#10;&#10;shift $(($OPTIND-1))&#10;debug &quot;file: $file positional: $*&quot;&#10;&#10;if ! $rflag &amp;&amp; ! $sflag; then&#10;    usage&#10;    exit 1&#10;fi" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
      <option name="SHELL_SCRIPT" value="true" />
    </context>
  </template>
  <template name="func" value="$name$ () {&#10;    return 0&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="ldbg2" value="_log.debug(&quot;{}:$text$&quot;.format(dbg()))" description="" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="-z" value="if [ -z &quot;$1&quot; ]; then&#10;    printf &quot;No data specified&quot;&#10;    exit 1&#10;else&#10;     # ...&#10;fi" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="twvalidate" value="err = $name$Schema().validate(kwargs)&#10;assert len(err) == 0, &quot;$name$Schema ParsingError: {}&quot;.format(err)" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="twvalidate2" value="try:&#10;    _ = $xxx$Schema().load($json$)&#10;except ValidationError as e:&#10;    _log.error(&quot;ERROR PROCESSING CONFIGURATION: {}&quot;.format(e))&#10;    return" description="" toReformat="true" toShortenFQNames="true">
    <variable name="xxx" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="json" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="twcapsys" value="captured = capsys.readouterr()&#10;assert '16 timesteps' in captured.out&#10;assert captured.err == &quot;&quot;" description="capture stderr/stout during pytest" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="twcaplog" value="caplog.set_level(logging.DEBUG)&#10;for record in caplog.records:&#10;    assert record.levelname != 'CRITICAL'&#10;assert 'wally' not in caplog.text" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="twjsondump" value="with codecs.open(path, 'w', encoding='utf-8') as f:&#10;    json.dump(self.sim_config, f, indent=4)" description="json 2/3 compatible dump version" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="2to3" value="from __future__ import (absolute_import, division,&#10;                        print_function, unicode_literals)&#10;from builtins import *" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="twsyspath" value="sys.path.append(path)&#10;sys.path.insert(0, path)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="twscript" value="#!/usr/bin/env python&#10;import logging&#10;from pathlib import Path&#10;&#10;import click&#10;&#10;_log = logging.getLogger(__name__)&#10;&#10;log_fmt = r'%(asctime)-15s %(levelname)s %(name)s %(funcName)s:%(lineno)d %(message)s'&#10;logging.basicConfig(format=log_fmt, level=logging.DEBUG)&#10;&#10;&#10;@click.group()&#10;@click.option('--debug/--no-debug', default=False)&#10;@click.pass_context&#10;def cli(ctx, debug):&#10;    # ensure that ctx.obj exists and is a dict (in case `cli()` is called by means other than the `if` block below&#10;    ctx.ensure_object(dict)&#10;&#10;    ctx.obj['DEBUG'] = debug&#10;&#10;&#10;@click.command()&#10;@click.option('--config', '-c', 'config_dir', default='data')&#10;@click.option('--plot', '-p', 'plot', default=tuple(), type=int, multiple=True)&#10;@click.pass_context&#10;def all(ctx, config_dir, plot):&#10;    click.echo(f&quot;Debug is {ctx.obj['DEBUG']}&quot;)&#10;&#10;&#10;cli.add_command(all)&#10;&#10;&#10;if __name__ == '__main__':&#10;    cli(obj={})" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="twplot" value="import numpy as np&#10;import plotly.graph_objects as go&#10;import import matplotlib.pyplot as plt&#10;&#10;plt.plot(np.linspace(1, 4, 10), np.logspace(1, 4, 10))&#10;plt.show()&#10;&#10;fig = go.Figure(data=go.Scatter(x=np.linspace(1, 4, 10), y=np.logspace(1, 4, 10)))&#10;fig.show()" description="plot f(x)" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="twimage" value="import numpy as np&#10;import plotly.express as px&#10;img = np.arange(100).reshape((10, 10))&#10;fig = px.imshow(img, color_continuous_scale='gray')&#10;fig.show()&#10;&#10;data = go.Heatmap(z=img, colorscale='gray', showscale=False)&#10;fig = go.Figure(data=data)&#10;fig.update_layout(width=500, height=500) &#10;fig.show()" description="plots image" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
      <option name="Python_Class" value="false" />
    </context>
  </template>
  <template name="twshell-script" value="#!/usr/bin/env bash&#10;################################################################################&#10;# sync.sh&#10;################################################################################&#10;&#10;files=(xxx yyy)&#10;&#10;SCRIPT_DIR=&quot;$( cd &quot;$( dirname &quot;${BASH_SOURCE[0]}&quot; )&quot; &amp;&amp; pwd )&quot;&#10;REPO=&quot;$SCRIPT_DIR/..&quot;&#10;&#10;pushd () {&#10;    command pushd &quot;$@&quot; &gt; /dev/null&#10;}&#10;&#10;popd () {&#10;    command popd &gt; /dev/null&#10;}&#10;&#10;pushd &quot;$REPO&quot; || exit 1&#10;&#10;for item in &quot;${files[@]}&quot;; do&#10;    filename=&quot;$REPO/$item&quot;&#10;    echo &quot;$item&quot;&#10;    echo &quot;................................................................................&quot;&#10;done&#10;&#10;popd || exit" description="Shell Template" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="SHELL_SCRIPT" value="true" />
    </context>
  </template>
  <template name="suffix" value="filename=$(basename -- &quot;$fullfile&quot;)&#10;extension=&quot;${filename##*.}&quot;&#10;filename=&quot;${filename%.*}&quot;" description="extracts filename suffix in bash" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="SHELL_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>